{"version":3,"sources":["components/Calculator.js","index.js"],"names":["Elements","props","Fragment","id","className","type","value","amount","readOnly","map","b","key","onClick","Calculator","handleChange","event","input","target","num1","fullInput","length","undefined","percent","number","setState","console","log","equals","validate","splice","numberCp","toString","indexOf","Math","sqrt","slice","push","sign","result","getResult","last","a","c","calculation","ope","num2","parseFloat","symbols","inputCp","i","forEach","e","idx","res","isNaN","state","bind","this","React","Component","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.417eb1e7.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction Elements(props) {\n\n    const buttons = [\n        ['seven', '7'], ['eight', '8'], ['nine', '9'],  ['percent', '%'], ['clear', 'clear', 'C'],\n        ['four', '4'], ['five', '5'], ['six', '6'], ['multiply', '*'], ['divide', '/'],\n        ['one', '1'], ['two', '2'], ['three', '3'], ['add', '+'],['subtract', '-'],\n        ['zero', '0'], ['decimal', '.'],  ['square-root', '√', '√'], ['equals', '='],\n    ]\n        \n    return (\n        <React.Fragment>\n            <input id=\"display\" className='text-right' type=\"input\" value={props.amount} readOnly></input>\n            {\n                buttons.map((b) => \n                    <button id={b[0]} key={b[0]} onClick={props.onClick()} value={b[1]}>\n                        {b[1]==='clear' | b[1]==='square-root'?b[2]:b[1]}\n                    </button>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nexport default class Calculator extends React.Component {\n\n    constructor() {\n        super()\n\n        this.fullInput = []\n        this.number = ''\n        this.numberCp = ''\n        this.equals = false\n\n        this.state = {\n            amount: 0\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange = (event) => {\n\n        let input = event.target.value\n\n        if (input === '%') {\n            let num1 = this.fullInput[this.fullInput.length - 2]\n            if (num1 === undefined) {\n                num1 = 1\n            }\n            let percent = num1 * this.number * 0.01   \n            this.setState({amount: percent})\n            this.number = percent\n        } else if (input === '/' | input === '*' | input === '+' | input === '-' ) {\n            console.log('fullinput ', this.fullInput)\n            if ((this.number === '' | this.number === '-') & (!this.equals)) {\n                if(input === '-') {\n                    this.number = this.validate(this.number, input)\n                    this.setState({amount: this.number})\n                } else {\n                    console.log('plus sign and number is empty', this.number)\n                    this.fullInput.splice(-1, 1, input)\n                    this.number = ''\n                    this.setState({amount: this.numberCp})\n                    console.log(this.fullInput)\n                }\n            } else {\n                if (this.number.toString().indexOf('√') !== -1) {\n                    this.number = Math.sqrt(this.number.slice(1))\n                }\n                this.fullInput.push(this.number)\n                let sign = this.fullInput[this.fullInput.length - 2]\n\n                if (((input === '+' | input === '-' ) & (this.fullInput.length > 2))\n                    |  (sign === '*' | sign === '/')) {\n                    let result = this.getResult(this.fullInput)\n                    this.setState({amount: result})\n                    this.numberCp = result\n                }\n                this.fullInput.push(input)\n                this.number = ''\n            }\n            this.equals = false\n        } else if (input === '=') {\n            let result = ''\n            let last = this.fullInput[this.fullInput.length - 2]\n            this.equals = true\n\n            if (this.number === '') {\n                this.number = last\n            }\n\n            if (this.number.toString().indexOf('√') !== -1) {\n                this.number = Math.sqrt(this.number.slice(1))\n            }\n\n            this.fullInput.push(this.number)\n\n            if (this.number !== '') {\n                result = this.getResult(this.fullInput)\n\n\n                this.fullInput.push(result)\n\n\n\n\n                this.setState({amount: result})\n                this.numberCp = result\n                input = ''\n                this.number = ''\n                console.log('after equals ', this.fullInput)\n            } \n        } else if (input === 'clear') {\n            input = ''\n            this.number = ''\n            this.numberCp = ''\n            this.fullInput = []\n            this.setState({amount: 0})\n        } else {   \n            this.number = this.validate(this.number, input)\n            this.numberCp = this.number\n            this.setState({amount: this.number})\n        }\n    }\n\n    validate = (a, c) => {\n        let str= ''\n\n        if (a === '0' && c === '0') {\n            return '0'\n        } else if (a === '' && c === '.') {\n            return '0.'\n        } else if (c === '.' && a.toString().indexOf('.') !== -1) {\n            str = a\n        } else if (c === '-' && a.toString().indexOf('-') !== -1) { \n            str = a\n        } else {\n            str = a + c\n        }\n\n        return str  \n    }\n\n    calculation = (num1, ope, num2) => {\n                \n        num1 = parseFloat(num1)\n        num2 = parseFloat(num2)\n\n        switch(ope) {\n            case '/':\n                return num1 / num2\n            case '*':\n                return num1 * num2\n            case '+':\n                return num1 + num2\n            case '-':\n                return num1 - num2\n            case '√':\n                return Math.sqrt(num1)\n            default:\n                return ''\n        }\n    }\n\n    getResult = (input) => {\n        const symbols = [['/', '*'], ['+', '-']]\n        const inputCp = input.slice(0)\n\n        for(let i=0; i<symbols.length; i++) {\n            inputCp.forEach((e) => {\n                if (symbols[i][0] === e | symbols[i][1] === e) {\n                    let idx = input.indexOf(e)\n                    let res = this.calculation(input[idx-1], e, input[idx+1])\n                    input.splice(idx-1, 3, res)\n                }\n            })\n        }\n        let result = input[0]\n\n        return isNaN(result)?'Error':result.toString().length>10?result.toString().slice(0,10):result\n    }\n\n    render() {\n        return (\n            <div className='container grid'>\n                <Elements \n                    amount={this.state.amount}\n                    onClick={() => this.handleChange}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Calculator from './components/Calculator'\n\n\nexport default class Main extends React.Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <Calculator />\n            </React.Fragment>\n        )\n    }\n}\n\nReactDOM.render(<Main />, document.getElementById('app'));\n\n\n"],"sourceRoot":""}