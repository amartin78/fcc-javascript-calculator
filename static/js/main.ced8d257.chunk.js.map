{"version":3,"sources":["utils/utils.js","components/Calculator.js","index.js"],"names":["validate","a","c","toString","indexOf","Elements","props","Fragment","id","className","type","value","amount","readOnly","map","b","key","onClick","Calculator","handleChange","event","input","target","state","length","test","number","percent","consecutiveOpe","normalOpe","equals","result","clear","storeNumber","numberCp","setState","lastExpression","fullInput","num1","undefined","lastOne","lastTwo","splice","Math","sqrt","slice","push","getResult","sign","symbols","inputCp","i","forEach","e","idx","res","ope","num2","parseFloat","calculation","isNaN","bind","this","React","Component","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ced8d257.chunk.js","sourcesContent":["\nexport function calculation(num1, ope, num2) {\n                \n    num1 = parseFloat(num1)\n    num2 = parseFloat(num2)\n\n    switch(ope) {\n        case '÷':\n            return num1 / num2\n        case 'X':\n            return num1 * num2\n        case '+':\n            return num1 + num2\n        case '-':\n            return num1 - num2\n        case '√':\n            return Math.sqrt(num1)\n        default:\n            return ''\n    }\n}\n\nexport function validate(a, c) {\n    let str = ''\n\n    if (a === '0' && c === '0') {\n        return '0'\n    } else if (a === '0' && c !== '.') {\n        return c\n    } else if (a === '' && c === '.') {\n        return '0.'\n    } else if (a === '-' && c === '.') {\n        return '-0.'\n    } else if (c === '.' && a.toString().indexOf('.') !== -1) {\n        str = a\n    } else if (c === '-' && a.toString().indexOf('-') !== -1) { \n        str = a\n    } else if (c === '√' && a.toString().indexOf('√') !== -1) { \n        str = a\n    } else {\n        str = a + c\n    }\n\n    return str  \n}","import React from 'react'\nimport { calculation, validate } from '../utils/utils'\n\n\nfunction Elements(props) {\n\n    const buttons = [\n        ['seven', '7'], ['eight', '8'], ['nine', '9'],  ['percent', '%'], ['clear', 'clear', 'C'],\n        ['four', '4'], ['five', '5'], ['six', '6'], ['multiply', 'X'], ['divide', '÷'],\n        ['one', '1'], ['two', '2'], ['three', '3'], ['add', '+'],['subtract', '-'],\n        ['zero', '0'], ['decimal', '.'],  ['square-root', '√', '√'], ['equals', '='],\n    ]\n\n    return (\n        <React.Fragment>\n            <input id=\"display\" className='text-right' type=\"input\" value={props.amount} readOnly></input>\n            {\n                buttons.map((b) => \n                    <button id={b[0]} key={b[0]} onClick={props.onClick()} value={b[1]}>\n                        {b[1]==='clear' | b[1]==='square-root'?b[2]:b[1]}\n                    </button>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nexport default class Calculator extends React.Component {\n\n    constructor() {\n        super()\n\n        this.fullInput = []\n        this.number = ''\n        this.numberCp = ''\n        this.equals = false\n        this.lastExpression = []\n\n        this.state = {\n            amount: 0\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange = (event) => {\n\n        let input = event.target.value\n\n        if (this.state.amount.length >= 10 & (/[0-9|.]+/).test(input) & this.number !== '') {\n            return \n        }\n\n        if (input === '%') {\n            this.percent(input)\n\n        } else if (input === '÷' | input === 'X' | input === '+' | input === '-' ) {\n\n            if (this.number === '' & this.state.amount === 0 & input !== '-') {\n                return 0\n            } \n            // if two or more operators are entered consecutively, the operation performed should be \n            // the last operator entered\n            else if ((this.number === '' | this.number === '-' | this.number === '√') ){\n                this.consecutiveOpe(input)\n                \n            } else { // if an operator is pressed after a number is entered\n                this.normalOpe(input)\n\n            }\n            this.equals = false\n        } else if (input === '=') {\n            this.result(input)\n\n        } else if (input === 'clear') {\n            this.clear(input)\n        } else {\n            this.storeNumber(this.number, input)\n        }\n    }\n\n    storeNumber = (a, b) => {\n        this.number = validate(a, b)\n        this.numberCp = this.number\n        this.setState({amount: this.number})\n    }\n\n    clear = (input) => {\n        input = ''\n        this.number = ''\n        this.numberCp = ''\n        this.lastExpression = []\n        this.fullInput = []\n        this.equals = false\n        this.setState({amount: 0})\n    }\n\n    percent = (input) => {\n        let num1 = this.fullInput[this.fullInput.length - 2]\n\n        if (this.number === '') {\n            return 0\n        }\n        if (num1 === undefined) {\n            num1 = 1\n        }\n        let percent = num1 * this.number * 0.01   \n        this.setState({amount: percent})\n        this.number = percent\n    }\n\n    result = (input) => {\n        let result = ''\n        let lastOne = this.fullInput[this.fullInput.length - 1]\n        let lastTwo = this.fullInput[this.fullInput.length - 2]\n        this.equals = true\n        \n        if (this.state.amount === 0) {\n            return 0\n        } else if (typeof lastOne === 'number') {\n            this.fullInput.splice(-1, 1, this.lastExpression[0])\n            this.number = this.lastExpression[1]\n        } else if (this.number === '') {\n            this.number = lastTwo\n        } else if (this.number.toString().indexOf('√') !== -1) {\n            if (this.number[0] === '-') {\n                this.number = -Math.sqrt(this.number.slice(2))\n            } else {\n                this.number = Math.sqrt(this.number.slice(1))\n            }\n        }\n\n        if (this.number !== '') {\n            // add number to array\n            this.fullInput.push(this.number)\n            this.lastExpression.push(this.number)\n        }\n        if (this.number !== '') {\n            result = this.getResult(this.fullInput)\n            this.fullInput.push(result)\n            this.setState({amount: result})\n            this.numberCp = result\n            input = ''\n            this.number = ''\n        } \n    }\n\n    consecutiveOpe = (input) => {\n        if (input === '-' & !this.equals) { // - operator\n            this.number = validate(this.number, input)\n            this.setState({amount: this.number})\n        } else {  // + or * or / operator\n            this.fullInput.splice(-1, 1, input)\n            this.number = ''\n            this.setState({amount: this.numberCp})\n        }\n    }\n\n    normalOpe = (input) => {\n        if (this.number.toString().indexOf('√') !== -1) {\n            if (this.number[0] === '-') {\n                this.number = -Math.sqrt(this.number.slice(2))\n            } else {\n                this.number = Math.sqrt(this.number.slice(1))\n            }\n        }\n\n        if (this.number !== '') {\n            // add number to array\n            this.fullInput.push(this.number)\n        }\n\n        let sign = this.fullInput[this.fullInput.length - 2]\n        if (((input === '+' | input === '-' ) & (this.fullInput.length > 2))\n            |  (sign === 'X' | sign === '÷')) {\n            let result = this.getResult(this.fullInput)\n            this.setState({amount: result})\n            this.numberCp = result\n        }\n\n        this.lastExpression.push(input)\n        // add operator to array and set number to empty value\n        this.fullInput.push(input)\n        this.number = ''\n    }\n\n    getResult = (input) => {\n        const symbols = [['÷', 'X'], ['+', '-']]\n        const inputCp = input.slice(0)\n\n        for(let i=0; i<symbols.length; i++) {\n            inputCp.forEach((e) => {\n                if (symbols[i][0] === e | symbols[i][1] === e) {\n                    let idx = input.indexOf(e)\n                    let res = calculation(input[idx-1], e, input[idx+1])\n                    input.splice(idx-1, 3, res)\n                }\n            })\n        }\n        let result = input[0]\n\n        if (isNaN(result)) {\n            return 'Error'\n        } else if (result.toString().length > 10) {\n            return result.toString().slice(0,11)\n        } else {\n            return result\n        }\n\n    }\n\n    render() {\n        return (\n            <div className='container grid'>\n                <Elements \n                    amount={this.state.amount}\n                    onClick={() => this.handleChange}\n                />\n            </div>\n        )\n    }\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Calculator from './components/Calculator'\n\n\nexport default class Main extends React.Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <Calculator />\n            </React.Fragment>\n        )\n    }\n}\n\nReactDOM.render(<Main />, document.getElementById('app'));\n\n\n"],"sourceRoot":""}